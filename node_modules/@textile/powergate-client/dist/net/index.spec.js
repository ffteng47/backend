"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
const rpc_pb_1 = require("@textile/grpc-powergate-client/dist/net/rpc/rpc_pb");
const chai_1 = require("chai");
const _1 = require(".");
const util_1 = require("../util");
describe("net", () => {
    const c = _1.createNet({ host: util_1.host, transport: util_1.getTransport() });
    it("should query peers", () => __awaiter(void 0, void 0, void 0, function* () {
        yield expectPeers();
    }));
    it("should get listen address", () => __awaiter(void 0, void 0, void 0, function* () {
        var _a, _b;
        const listenAddr = yield c.listenAddr();
        chai_1.expect((_a = listenAddr.addrInfo) === null || _a === void 0 ? void 0 : _a.addrsList).length.greaterThan(0);
        chai_1.expect((_b = listenAddr.addrInfo) === null || _b === void 0 ? void 0 : _b.id).length.greaterThan(0);
    }));
    it("should find a peer", () => __awaiter(void 0, void 0, void 0, function* () {
        const peers = yield expectPeers();
        const peerId = expectPeerInfo(peers).id;
        const peer = yield c.findPeer(peerId);
        chai_1.expect(peer.peerInfo).not.undefined;
    }));
    it("should get peer connectedness", () => __awaiter(void 0, void 0, void 0, function* () {
        const peers = yield expectPeers();
        const peerId = expectPeerInfo(peers).id;
        const resp = yield c.connectedness(peerId);
        chai_1.expect(resp.connectedness).equal(rpc_pb_1.Connectedness.CONNECTEDNESS_CONNECTED);
    }));
    it("should disconnect and reconnect to a peer", () => __awaiter(void 0, void 0, void 0, function* () {
        const peers = yield expectPeers();
        const peerInfo = expectPeerInfo(peers);
        yield c.disconnectPeer(peerInfo.id);
        yield c.connectPeer(peerInfo);
    }));
    function expectPeers() {
        return __awaiter(this, void 0, void 0, function* () {
            const peers = yield c.peers();
            chai_1.expect(peers.peersList).length.greaterThan(0);
            return peers;
        });
    }
    function expectPeerInfo(peersResp) {
        const peerInfo = peersResp.peersList[0].addrInfo;
        if (!peerInfo) {
            chai_1.assert.fail("no peer info");
        }
        return peerInfo;
    }
});
//# sourceMappingURL=index.spec.js.map