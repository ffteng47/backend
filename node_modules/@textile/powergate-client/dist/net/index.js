"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.createNet = void 0;
const rpc_pb_1 = require("@textile/grpc-powergate-client/dist/net/rpc/rpc_pb");
const rpc_pb_service_1 = require("@textile/grpc-powergate-client/dist/net/rpc/rpc_pb_service");
const util_1 = require("../util");
/**
 * @ignore
 */
exports.createNet = (config) => {
    const client = new rpc_pb_service_1.RPCServiceClient(config.host, config);
    return {
        listenAddr: () => util_1.promise((cb) => client.listenAddr(new rpc_pb_1.ListenAddrRequest(), cb), (res) => res.toObject()),
        peers: () => util_1.promise((cb) => client.peers(new rpc_pb_1.PeersRequest(), cb), (res) => res.toObject()),
        findPeer: (peerId) => {
            const req = new rpc_pb_1.FindPeerRequest();
            req.setPeerId(peerId);
            return util_1.promise((cb) => client.findPeer(req, cb), (res) => res.toObject());
        },
        connectPeer: (peerInfo) => {
            const info = new rpc_pb_1.PeerAddrInfo();
            info.setId(peerInfo.id);
            info.setAddrsList(peerInfo.addrsList);
            const req = new rpc_pb_1.ConnectPeerRequest();
            req.setPeerInfo(info);
            return util_1.promise((cb) => client.connectPeer(req, cb), () => {
                // nothing to return
            });
        },
        connectedness: (peerId) => {
            const req = new rpc_pb_1.ConnectednessRequest();
            req.setPeerId(peerId);
            return util_1.promise((cb) => client.connectedness(req, cb), (res) => res.toObject());
        },
        disconnectPeer: (peerId) => {
            const req = new rpc_pb_1.DisconnectPeerRequest();
            req.setPeerId(peerId);
            return util_1.promise((cb) => client.disconnectPeer(req, cb), () => {
                // nothing to return
            });
        },
    };
};
//# sourceMappingURL=index.js.map