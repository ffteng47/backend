"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const chai_1 = require("chai");
const child_process_1 = __importDefault(require("child_process"));
const wait_on_1 = __importDefault(require("wait-on"));
const _1 = require(".");
const util_1 = require("./util");
beforeEach(function () {
    return __awaiter(this, void 0, void 0, function* () {
        this.timeout(120000);
        child_process_1.default.exec(`cd powergate-docker && BIGSECTORS=false make localnet`, (err) => {
            if (err) {
                throw err;
            }
        });
        yield wait_on_1.default({
            resources: ["http://0.0.0.0:6002"],
            timeout: 120000,
            validateStatus: function () {
                return true; // the call expectedly returns 404, so just allow that
            },
        });
    });
});
afterEach(function () {
    return __awaiter(this, void 0, void 0, function* () {
        this.timeout(120000);
        yield new Promise((resolve, reject) => {
            child_process_1.default.exec(`cd powergate-docker && make localnet-down`, (err, stdout) => {
                if (err) {
                    reject(err);
                }
                resolve(stdout);
            });
        });
    });
});
describe("client", () => {
    const pow = _1.createPow({ host: util_1.host });
    it("should create a client", () => {
        chai_1.expect(pow.ffs).not.undefined;
        chai_1.expect(pow.health).not.undefined;
        chai_1.expect(pow.net).not.undefined;
        chai_1.expect(pow.miners).not.undefined;
        chai_1.expect(pow.host).equal(util_1.host);
    });
    it("should get build info", () => __awaiter(void 0, void 0, void 0, function* () {
        const res = yield pow.buildInfo();
        chai_1.expect(res.gitSummary).not.empty;
    }));
});
//# sourceMappingURL=index.spec.js.map