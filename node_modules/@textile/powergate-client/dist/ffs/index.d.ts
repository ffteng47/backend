import { grpc } from "@improbable-eng/grpc-web";
import { AddrsResponse, CreatePayChannelResponse, CreateResponse, DefaultStorageConfigResponse, GetStorageConfigResponse, GetStorageJobResponse, IDResponse, InfoResponse, Job, ListAPIResponse, ListPayChannelsResponse, ListRetrievalDealRecordsResponse, ListStorageDealRecordsResponse, LogEntry, NewAddrResponse, PushStorageConfigResponse, ReplaceResponse, ShowAllResponse, ShowResponse, StageResponse, StorageConfig } from "@textile/grpc-powergate-client/dist/ffs/rpc/rpc_pb";
import { Config } from "../types";
import { GetFolderOptions, ListDealRecordsOptions, PushStorageConfigOptions, WatchLogsOptions } from "./types";
export { GetFolderOptions, ListDealRecordsOptions, WatchLogsOptions, PushStorageConfigOptions };
export interface FFS {
    /**
     * Creates a new FFS instance.
     * @returns Information about the new FFS instance.
     */
    create: () => Promise<CreateResponse.AsObject>;
    /**
     * Lists all FFS instance IDs.
     * @returns A list off all FFS instance IDs.
     */
    list: () => Promise<ListAPIResponse.AsObject>;
    /**
     * Get the FFS instance ID associated with the current auth token.
     * @returns A Promise containing the FFS instance ID.
     */
    id: () => Promise<IDResponse.AsObject>;
    /**
     * Get all wallet addresses associated with the current auth token.
     * @returns A list of wallet addresses.
     */
    addrs: () => Promise<AddrsResponse.AsObject>;
    /**
     * Get the default storage config associated with the current auth token.
     * @returns The default storage config.
     */
    defaultStorageConfig: () => Promise<DefaultStorageConfigResponse.AsObject>;
    /**
     * Create a new wallet address associates with the current auth token.
     * @param name A human readable name for the address.
     * @param type Address type, defaults to bls.
     * @param makeDefault Specify if the new address should become the default address for this FFS instance, defaults to false.
     * @returns Information about the newly created address.
     */
    newAddr: (name: string, type?: "bls" | "secp256k1" | undefined, makeDefault?: boolean | undefined) => Promise<NewAddrResponse.AsObject>;
    /**
     * Get the desired storage config for the provided cid, this config may not yet be realized.
     * @param cid The cid of the desired storage config.
     * @returns The storage config for the provided cid.
     */
    getStorageConfig: (cid: string) => Promise<GetStorageConfigResponse.AsObject>;
    /**
     * Set the default storage config for this FFS instance.
     * @param config The new default storage config.
     */
    setDefaultStorageConfig: (config: StorageConfig.AsObject) => Promise<void>;
    /**
     * Get the current storage config for the provided cid, the reflects the actual storage state.
     * @param cid The cid of the desired storage config.
     * @returns The current storage config for the provided cid.
     */
    show: (cid: string) => Promise<ShowResponse.AsObject>;
    /**
     * Get general information about the current FFS instance.
     * @returns Information about the FFS instance.
     */
    info: () => Promise<InfoResponse.AsObject>;
    /**
     * Get the current state of a storage job.
     * @param jobId The job id to query.
     * @returns The current state of the storage job.
     */
    getStorageJob: (jobId: string) => Promise<GetStorageJobResponse.AsObject>;
    /**
     * Listen for job updates for the provided job ids.
     * @param handler The callback to receive job updates.
     * @param jobs A list of job ids to watch.
     * @returns A function that can be used to cancel watching.
     */
    watchJobs: (handler: (event: Job.AsObject) => void, ...jobs: string[]) => () => void;
    /**
     * Cancel a job.
     * @param jobId The id of the job to cancel.
     */
    cancelJob: (jobId: string) => Promise<void>;
    /**
     * Listen for any updates for a stored cid.
     * @param handler The callback to receive log updates.
     * @param cid The cid to watch.
     * @param opts Options that control the behavior of watching logs.
     * @returns A function that can be used to cancel watching.
     */
    watchLogs: (handler: (event: LogEntry.AsObject) => void, cid: string, opts?: WatchLogsOptions) => () => void;
    /**
     * Replace pushes a StorageConfig for cid2 equal to that of cid1, and removes cid1. This operation
     * is more efficient than manually removing and adding in two separate operations.
     * @param cid1 The cid to replace.
     * @param cid2 The new cid.
     * @returns The job id of the job executing the storage configuration.
     */
    replace: (cid1: string, cid2: string) => Promise<ReplaceResponse.AsObject>;
    /**
     * Push a storage config for the specified cid.
     * @param cid The cid to store.
     * @param opts Options controlling the behavior storage config execution.
     * @returns An object containing the job id of the job executing the storage configuration.
     */
    pushStorageConfig: (cid: string, opts?: PushStorageConfigOptions) => Promise<PushStorageConfigResponse.AsObject>;
    /**
     * Remove a cid from FFS storage.
     * @param cid The cid to remove.
     */
    remove: (cid: string) => Promise<void>;
    /**
     * Retrieve data stored in the current FFS instance.
     * @param cid The cid of the data to retrieve.
     * @returns The raw data.
     */
    get: (cid: string) => Promise<Uint8Array>;
    /**
     * Retrieve a folder stored in the current FFS instance.
     * @param cid The root cid of the folder to retrieve.
     * @param outputPath The location to write the folder to
     * @param opts Options controlling the behavior of retrieving the folder
     */
    getFolder: (cid: string, output: string, opts?: GetFolderOptions) => Promise<void>;
    /**
     * Send FIL from an address associated with the current FFS instance to any other address.
     * @param from The address to send FIL from.
     * @param to The address to send FIL to.
     * @param amount The amount of FIL to send.
     */
    sendFil: (from: string, to: string, amount: number) => Promise<void>;
    /**
     * A helper method to stage data in IPFS in preparation for storing using ffs.pushStorageConfig.
     * This doesn't actually store data in FFS, you'll want to call pushStorageConfig for that.
     * @param input The raw data to add.
     * @returns The cid of the added data.
     */
    stage: (input: Uint8Array) => Promise<StageResponse.AsObject>;
    /**
     * A helper method to stage a folder recursively in IPFS in preparation for storing using ffs.pushStorageConfig.
     * This doesn't actually store data in FFS, you'll want to call pushStorageConfig for that.
     * @param path The path to the folder to add.
     * @returns The cid of the added folder.
     */
    stageFolder: (path: string) => Promise<string>;
    /**
     * List all payment channels for the current FFS instance.
     * @returns A list of payment channel info.
     */
    listPayChannels: () => Promise<ListPayChannelsResponse.AsObject>;
    /**
     * Create or get a payment channel.
     * @param from The address to send FIL from.
     * @param to The address to send FIL to.
     * @param amt The amount to ensure exists in the payment channel.
     * @returns Information about the payment channel.
     */
    createPayChannel: (from: string, to: string, amt: number) => Promise<CreatePayChannelResponse.AsObject>;
    /**
     * Redeem a payment channel.
     * @param payChannelAddr The address of the payment channel to redeem.
     */
    redeemPayChannel: (payChannelAddr: string) => Promise<void>;
    /**
     * List storage deal records for the FFS instance according to the provided options.
     * @param opts Options that control the behavior of listing records.
     * @returns A list of storage deal records.
     */
    listStorageDealRecords: (opts?: ListDealRecordsOptions) => Promise<ListStorageDealRecordsResponse.AsObject>;
    /**
     * List retrieval deal records for the FFS instance according to the provided options.
     * @param opts Options that control the behavior of listing records.
     * @returns A list of retrieval deal records.
     */
    listRetrievalDealRecords: (opts?: ListDealRecordsOptions) => Promise<ListRetrievalDealRecordsResponse.AsObject>;
    /**
     * List cid infos for all data stored in the current FFS instance.
     * @returns A list of cid info.
     */
    showAll: () => Promise<ShowAllResponse.AsObject>;
}
/**
 * @ignore
 */
export declare const createFFS: (config: Config, getMeta: () => grpc.Metadata, getHeaders: () => Record<string, string>) => FFS;
