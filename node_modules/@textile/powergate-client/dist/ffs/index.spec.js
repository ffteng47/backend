"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const rpc_pb_1 = require("@textile/grpc-powergate-client/dist/ffs/rpc/rpc_pb");
const chai_1 = require("chai");
const fs_1 = __importDefault(require("fs"));
const _1 = require(".");
const util_1 = require("../util");
describe("ffs", function () {
    this.timeout(180000);
    const { getMeta, getHeaders, setToken } = util_1.useToken("");
    const c = _1.createFFS({ host: util_1.host, transport: util_1.getTransport() }, getMeta, getHeaders);
    it("should create an instance", () => __awaiter(this, void 0, void 0, function* () {
        yield expectNewInstance();
    }));
    it("should list instances", () => __awaiter(this, void 0, void 0, function* () {
        yield expectNewInstance();
        const res = yield c.list();
        chai_1.expect(res.instancesList).length.greaterThan(0);
    }));
    it("should get instance id", () => __awaiter(this, void 0, void 0, function* () {
        const instanceInfo = yield expectNewInstance();
        const res = yield c.id();
        chai_1.expect(res.id).eq(instanceInfo.id);
    }));
    it("should get addrs", () => __awaiter(this, void 0, void 0, function* () {
        yield expectNewInstance();
        yield expectAddrs(1);
    }));
    it("should get the default config", () => __awaiter(this, void 0, void 0, function* () {
        yield expectNewInstance();
        yield expectDefaultStorageConfig();
    }));
    it("should create a new addr", () => __awaiter(this, void 0, void 0, function* () {
        yield expectNewInstance();
        yield expectAddrs(1);
        yield expectNewAddr();
        yield expectAddrs(2);
    }));
    it("should set default config", () => __awaiter(this, void 0, void 0, function* () {
        yield expectNewInstance();
        const defaultConfig = yield expectDefaultStorageConfig();
        yield c.setDefaultStorageConfig(defaultConfig);
    }));
    it("should get info", () => __awaiter(this, void 0, void 0, function* () {
        yield expectNewInstance();
        const res = yield c.info();
        chai_1.expect(res.info).not.undefined;
    }));
    it("should stage", () => __awaiter(this, void 0, void 0, function* () {
        yield expectNewInstance();
        yield expectStage("sample-data/samplefile");
    }));
    it("should stage a folder", () => __awaiter(this, void 0, void 0, function* () {
        yield expectNewInstance();
        const res = yield c.stageFolder("./sample-data");
        chai_1.expect(res).length.greaterThan(0);
    }));
    it("should push config", () => __awaiter(this, void 0, void 0, function* () {
        yield expectNewInstance();
        const cid = yield expectStage("sample-data/samplefile");
        const config = yield expectDefaultStorageConfig();
        yield expectPushStorageConfig(cid, { override: false, storageConfig: config });
    }));
    it("should get storage job", () => __awaiter(this, void 0, void 0, function* () {
        var _a;
        yield expectNewInstance();
        const cid = yield expectStage("sample-data/samplefile");
        const jobId = yield expectPushStorageConfig(cid);
        const res = yield c.getStorageJob(jobId);
        chai_1.expect((_a = res.job) === null || _a === void 0 ? void 0 : _a.cid).eq(cid);
    }));
    it("should watch job", () => __awaiter(this, void 0, void 0, function* () {
        yield expectNewInstance();
        const addrs = yield expectAddrs(1);
        yield waitForBalance(addrs[0].addr, 0);
        const cid = yield expectStage("sample-data/samplefile");
        const jobId = yield expectPushStorageConfig(cid);
        yield waitForJobStatus(jobId, rpc_pb_1.JobStatus.JOB_STATUS_SUCCESS);
        // Test that if we call watchJobs again after the job has finished
        // that is calls us back with the latest status
        yield new Promise((r) => setTimeout(r, 10000));
        yield waitForJobStatus(jobId, rpc_pb_1.JobStatus.JOB_STATUS_SUCCESS);
    }));
    it("should watch logs", () => __awaiter(this, void 0, void 0, function* () {
        yield expectNewInstance();
        const cid = yield expectStage("sample-data/samplefile");
        yield expectPushStorageConfig(cid);
        yield new Promise((resolve, reject) => {
            const cancel = c.watchLogs((logEvent) => {
                if (logEvent.cid.length > 0) {
                    cancel();
                    resolve();
                }
                else {
                    cancel();
                    reject("empty log cid");
                }
            }, cid, { includeHistory: true });
        });
    }));
    it("should get storage deal records", () => __awaiter(this, void 0, void 0, function* () {
        yield expectNewInstance();
        const addrs = yield expectAddrs(1);
        yield waitForBalance(addrs[0].addr, 0);
        const [cid1, cid2, cid3] = yield Promise.all([
            expectStage("sample-data/samplefile"),
            expectStage("sample-data/samplefile2"),
            expectStage("sample-data/samplefile3"),
        ]);
        const jobId1 = yield expectPushStorageConfig(cid1);
        yield new Promise((r) => setTimeout(r, 1000));
        const jobId2 = yield expectPushStorageConfig(cid2);
        yield new Promise((r) => setTimeout(r, 1000));
        const jobId3 = yield expectPushStorageConfig(cid3);
        yield Promise.all([
            waitForJobStatus(jobId1, rpc_pb_1.JobStatus.JOB_STATUS_EXECUTING),
            waitForJobStatus(jobId2, rpc_pb_1.JobStatus.JOB_STATUS_EXECUTING),
            waitForJobStatus(jobId3, rpc_pb_1.JobStatus.JOB_STATUS_EXECUTING),
        ]);
        // wait for a second so some async work of actually starting a deal happens
        yield new Promise((r) => setTimeout(r, 1000));
        const { recordsList: pendingRecords } = yield c.listStorageDealRecords({
            includePending: true,
            ascending: true,
            fromAddresses: [addrs[0].addr],
            dataCids: [cid1, cid2, cid3],
        });
        chai_1.expect(pendingRecords, "pending length").length(3);
        chai_1.expect(pendingRecords[0].time).lessThan(pendingRecords[1].time).lessThan(pendingRecords[2].time);
        const { recordsList: finalRecords } = yield c.listStorageDealRecords({ includeFinal: true });
        chai_1.expect(finalRecords, "final empty").empty;
        yield Promise.all([
            waitForJobStatus(jobId1, rpc_pb_1.JobStatus.JOB_STATUS_SUCCESS),
            waitForJobStatus(jobId2, rpc_pb_1.JobStatus.JOB_STATUS_SUCCESS),
            waitForJobStatus(jobId3, rpc_pb_1.JobStatus.JOB_STATUS_SUCCESS),
        ]);
        const { recordsList: pendingRecords2 } = yield c.listStorageDealRecords({
            includePending: true,
        });
        chai_1.expect(pendingRecords2, "pending2 empty").empty;
        const { recordsList: finalRecords2 } = yield c.listStorageDealRecords({
            includeFinal: true,
            ascending: true,
            fromAddresses: [addrs[0].addr],
            dataCids: [cid1, cid2, cid3],
        });
        chai_1.expect(finalRecords2, "final2 length").length(3);
        chai_1.expect(finalRecords2[0].time).lessThan(finalRecords2[1].time).lessThan(finalRecords2[2].time);
    }));
    it("should get a retrieval deal record", () => __awaiter(this, void 0, void 0, function* () {
        // ToDo: Figure out hot to make sure the data in the previous push isn't cached in hot
    }));
    it("should get storage config", () => __awaiter(this, void 0, void 0, function* () {
        var _b, _c;
        yield expectNewInstance();
        const cid = yield expectStage("sample-data/samplefile");
        yield expectPushStorageConfig(cid);
        const res = yield c.getStorageConfig(cid);
        chai_1.expect((_b = res.config) === null || _b === void 0 ? void 0 : _b.cold).not.undefined;
        chai_1.expect((_c = res.config) === null || _c === void 0 ? void 0 : _c.hot).not.undefined;
    }));
    it("should show", () => __awaiter(this, void 0, void 0, function* () {
        yield expectNewInstance();
        const addrs = yield expectAddrs(1);
        yield waitForBalance(addrs[0].addr, 0);
        const cid = yield expectStage("sample-data/samplefile");
        const jobId = yield expectPushStorageConfig(cid);
        yield waitForJobStatus(jobId, rpc_pb_1.JobStatus.JOB_STATUS_SUCCESS);
        const res = yield c.show(cid);
        chai_1.expect(res.cidInfo).not.undefined;
    }));
    it("should show all", () => __awaiter(this, void 0, void 0, function* () {
        yield expectNewInstance();
        const addrs = yield expectAddrs(1);
        yield waitForBalance(addrs[0].addr, 0);
        const cid = yield expectStage("sample-data/samplefile");
        const jobId = yield expectPushStorageConfig(cid);
        yield waitForJobStatus(jobId, rpc_pb_1.JobStatus.JOB_STATUS_SUCCESS);
        const res = yield c.showAll();
        chai_1.expect(res.cidInfosList).not.empty;
    }));
    it("should replace", () => __awaiter(this, void 0, void 0, function* () {
        yield expectNewInstance();
        const addrs = yield expectAddrs(1);
        yield waitForBalance(addrs[0].addr, 0);
        const cid = yield expectStage("sample-data/samplefile");
        const jobId = yield expectPushStorageConfig(cid);
        yield waitForJobStatus(jobId, rpc_pb_1.JobStatus.JOB_STATUS_SUCCESS);
        const cid2 = yield expectStage("sample-data/samplefile2");
        const res = yield c.replace(cid, cid2);
        chai_1.expect(res.jobId).length.greaterThan(0);
    }));
    it("should get", () => __awaiter(this, void 0, void 0, function* () {
        yield expectNewInstance();
        const addrs = yield expectAddrs(1);
        yield waitForBalance(addrs[0].addr, 0);
        const cid = yield expectStage("sample-data/samplefile");
        const jobId = yield expectPushStorageConfig(cid);
        yield waitForJobStatus(jobId, rpc_pb_1.JobStatus.JOB_STATUS_SUCCESS);
        const bytes = yield c.get(cid);
        chai_1.expect(bytes.byteLength).greaterThan(0);
    }));
    it("should get a folder", () => __awaiter(this, void 0, void 0, function* () {
        yield expectNewInstance();
        const res = yield c.stageFolder("./sample-data");
        chai_1.expect(res).length.greaterThan(0);
        yield c.getFolder(res, "./output", { timeout: 10000 });
    }));
    it("should cancel a job", () => __awaiter(this, void 0, void 0, function* () {
        yield expectNewInstance();
        const cid = yield expectStage("sample-data/samplefile");
        const jobId = yield expectPushStorageConfig(cid);
        yield c.cancelJob(jobId);
    }));
    it("should list payment channels", () => __awaiter(this, void 0, void 0, function* () {
        // TODO
    }));
    it("should create a payment channel", () => __awaiter(this, void 0, void 0, function* () {
        // TODO
    }));
    it("should redeem a payment channel", () => __awaiter(this, void 0, void 0, function* () {
        // TODO
    }));
    it("should remove", () => __awaiter(this, void 0, void 0, function* () {
        yield expectNewInstance();
        const cid = yield expectStage("sample-data/samplefile");
        const conf = {
            repairable: false,
            cold: {
                enabled: false,
            },
            hot: {
                allowUnfreeze: false,
                enabled: false,
                unfreezeMaxPrice: 0,
            },
        };
        const jobId = yield expectPushStorageConfig(cid, { override: false, storageConfig: conf });
        yield waitForJobStatus(jobId, rpc_pb_1.JobStatus.JOB_STATUS_SUCCESS);
        yield c.remove(cid);
    }));
    it("should send fil", () => __awaiter(this, void 0, void 0, function* () {
        yield expectNewInstance();
        const addrs = yield expectAddrs(1);
        yield waitForBalance(addrs[0].addr, 0);
        const addr = yield expectNewAddr();
        yield c.sendFil(addrs[0].addr, addr, 10);
    }));
    function expectNewInstance() {
        return __awaiter(this, void 0, void 0, function* () {
            const res = yield c.create();
            chai_1.expect(res.id).not.empty;
            chai_1.expect(res.token).not.empty;
            setToken(res.token);
            return res;
        });
    }
    function expectAddrs(length) {
        return __awaiter(this, void 0, void 0, function* () {
            const res = yield c.addrs();
            chai_1.expect(res.addrsList).length(length);
            return res.addrsList;
        });
    }
    function expectNewAddr() {
        return __awaiter(this, void 0, void 0, function* () {
            const res = yield c.newAddr("my addr");
            chai_1.expect(res.addr).length.greaterThan(0);
            return res.addr;
        });
    }
    function expectDefaultStorageConfig() {
        return __awaiter(this, void 0, void 0, function* () {
            const res = yield c.defaultStorageConfig();
            chai_1.expect(res.defaultStorageConfig).not.undefined;
            // eslint-disable-next-line @typescript-eslint/no-non-null-assertion
            return res.defaultStorageConfig;
        });
    }
    function expectStage(path) {
        return __awaiter(this, void 0, void 0, function* () {
            const buffer = fs_1.default.readFileSync(path);
            const res = yield c.stage(buffer);
            chai_1.expect(res.cid).length.greaterThan(0);
            return res.cid;
        });
    }
    function expectPushStorageConfig(cid, opts) {
        return __awaiter(this, void 0, void 0, function* () {
            const res = yield c.pushStorageConfig(cid, opts);
            chai_1.expect(res.jobId).length.greaterThan(0);
            return res.jobId;
        });
    }
    function waitForJobStatus(jobId, status) {
        return new Promise((resolve, reject) => {
            try {
                const cancel = c.watchJobs((job) => {
                    if (job.errCause.length > 0) {
                        reject(job.errCause);
                    }
                    if (job.status === rpc_pb_1.JobStatus.JOB_STATUS_CANCELED) {
                        reject("job canceled");
                    }
                    if (job.status === rpc_pb_1.JobStatus.JOB_STATUS_FAILED) {
                        reject("job failed");
                    }
                    if (job.status === status) {
                        cancel();
                        resolve();
                    }
                }, jobId);
            }
            catch (e) {
                reject(e);
            }
        });
    }
    function waitForBalance(address, greaterThan) {
        return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {
            while (true) {
                try {
                    const res = yield c.info();
                    if (!res.info) {
                        reject("no balance info returned");
                        return;
                    }
                    const info = res.info.balancesList.find((info) => { var _a; return ((_a = info.addr) === null || _a === void 0 ? void 0 : _a.addr) === address; });
                    if (!info) {
                        reject("address not in balances list");
                        return;
                    }
                    if (info.balance > greaterThan) {
                        resolve(info.balance);
                        return;
                    }
                }
                catch (e) {
                    reject(e);
                }
                yield new Promise((r) => setTimeout(r, 1000));
            }
        }));
    }
});
//# sourceMappingURL=index.spec.js.map